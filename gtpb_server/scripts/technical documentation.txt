agileBase technical documentation

- General introduction -

agileBase is a high level database application development framework. Non-programmers can prototype working web based applications that create, edit and report on structured data in a matter of minutes. There's a rich set of features, including fine grained user and role privileges, colourised reports for 'unusual data' highlighting and integration with mapping services. Usability is high on the agenda with the friendly and responsive AJAX user interface.

With the standard 'database front-end' interface, developers can create a web based application by quickly adding tables, fields, calculations, reports, joins, filters..., in fact, any functionality that an SQL database can handle. Basic functions have a really simple user interface, to create more complex schemas some database knowledge is useful. A lot of work has been done on making database creation as obvious and intuitive as possible though.

End users view and edit data in a real-time fashion: records update as you type for speedy data entry and validation. Numbers are coloured in a graduated fashion, useful for picking out out of the ordinary values.

Of course being a web based application it's available anywhere in the world for the price of an internet connection. Data is backed up daily.

- General architecture -

A standard Model-View-Controller architecture is employed.

The model contains methods for editing the data storage schema, i.e. adding tables and fields, editing reports, assigning privileges, setting session variables etc. These are called by sending HTTP requests to the controller.

The view uses the Velocity templating language, a high level simple to use language widely used and well documented at the Apache Velocity webpage [url]. View templates can call methods to display any schema data which the model stores as well as display end-user data e.g. reports and data editing components.

Behind all this, data is stored in a scaleable SQL database, postgresql [url]. Objects are programmed in Java.

agileBase comes with a full set of pre-built templates which provide a rich interface for creating and using database applications. However, some applications require domain specific additions to cope with the needs of specific business areas. This can be catered for by writing custom templates to call the standard Controller API. There's also the option of including a business rules engine for complex logic.

- Out of the box functionality -

Without template customisation, agileBase can be used for reasonably complex data handling needs. We'll step through an example of building a simple application here to show the process.

Lets quickly build a simple CRM application to handle organisations, contacts and opportunities.

First of all, we need a table to store organisation data. Use the blue 'create a new table' link near the top left of the screen and call it 'Organisations'.

To set out the data structure, some fields need to be added. Click the fields tab at the bottom of the screen. Type in 'Company name' under the Field Name column and press the Create Field button (you can ignore all other field options). Follow the same process to create fields 'address', 'town', 'postcode' and 'website'.

That's the table created. Start filling it with data to see how the data entry works: Click the Data tab at the bottom of the screen then the green New button at the top left to add a new record.

An entry form will be shown on screen. Notice how typing data in updates the record list shown above as you type. There's no need to press a 'Save' button.

Once you've added a few records, select one previously entered. You should see that the postcode is automatically recognised and a 'map' link appears which loads a Google map centred on the area. Similarly, the website field has a link next to it that loads the website in a separate window. agileBase automatically recognises data types by the content format, not the fact that they're called 'postcode' and 'website'.

It's a similar process to add the contacts table. The additional thing we've got to bear in mind is that each contact belongs to a company. How do we tell agileBase this?

Create the contacts table using the 'create a new table' link as before and click the Fields tab at the bottom of the screen. For field name, type 'Company' but this time, under Field Type, select Relation. For the relation options, select Organisations as the table to use, Organisations -> Company name as the value to display and finish by pressing Create Field. This means that each contact will belong to a company and when asked which company, a list of company names will be shown from which you can choose. First add some more fields, then we can see in a minute. Add fields 'forename', 'surname', 'telephone number' and 'email address.

Now to the data entry: before trying to enter data, click on the Organisations table and select an organisation. Then click on Contacts and use the New button. You'll see that the new contact is automatically assigned to the last organisation selected. Of course you can change this if you want. Add a few contacts to different organisations.

Once again, if you click a contact, you'll see agileBase recognise a content type: this time, an email link is displayed next to valid email addresses. Clicking the link brings up a mail composition window to that address.

Now's also a good time to see the filtering: Clicking the filter button at the top of the screen will show a row of input boxes at the top of the data. If you start typing in one of these, data is filtered down as you type. Try filtering contacts by company name for example, to show all contacts for a particular company. Filtering remains lightning fast even for large data sets.

See if you can add an 'Opportunities' table linked to companies following the same process as that for contacts.

You may like to add fields State to describe the opportunity as Hot, Warm or Cold and Value to show a potential revenue. When you add these fields, tick the option 'use lookup for input' for state and select the type 'number' for the value field. You'll notice a couple of things about these fields when you enter data:

As soon as you've entered a few values, State will automatically pick up the Hot, Warm and Cold (or however you describe your opportunity states) and present them in a dropdown so you don't have to type them. This also helps data values to be input in a consistent way.

For the value numbers, agileBase will colour large numbers green and small red - the larger the brighter green and the smaller the brighter red. This allows at-a-glance viewing of important data and easy recognition of values which are way off normal.

That's the basic database setup covered. Two major features we haven't covered are user privileges and reporting. Try to create some users and assign privileges yourself - the process is reasonably simple. To get started, click Administration on the left and Users under that. The New button now creates a new user instead of adding a record. Reporting we'll leave until later.

- Extensibility -
- Extensibility: introduction -

Some applications may require specific requirements outside the scope of a general application, for example data exports may need to be done in a certain format to interoperate with other systems. There's a documented API which lets templates be designed in a completely flexible manner.

The general process of a agileBase request is:

1) A HTTP request is sent to the server which consists of
1a) an optional command to carry out some action(s), e.g. to add a calculation to a report of insert a record into the database
1b) an optional command to 'remember' a certain bit of information, i.e. session handling. Arbitrary text and numbers can be stored as well as some agileBase objects such as tables and reports
1c) the mandatory name of a template to return. This template can of course contain logic that in turn load different return templates based on the state of the application

2) Any actions and session handling requested in 1) are carried out on the server, in the order required by the application

3) The template requested in 1) is returned and parsed. This can call any 'view' or 'session data reading' methods documented in the API

In general, commands in 1a) fall into three types: those to alter the schema, those to alter data and those to alter authentication info., e.g. adding users & roles, assigning privileges or changing passwords.

- Extensibility: template processing -

Templates have full access to the entire range of objects and data used by the server, from certain entry points, subject to the privileges of the logged in user of course.

The templating language itself is described on the Velocity website [url]. agileBase makes one 'root' object available to the template, $viewMethods, which contains methods for accessing all application data. Session data can be accessed from the object returned by $viewMethods.getSessionData().

In addition to this, the $viewTools object is available containing a few utility methods such as logging and browser version checking.

- Templating example -

As an example, here is the code for a simple template to output a report as a CSV file (comma separated variable) used for importing into spreadsheets.

#set($table=$viewMethods.getTableByName("contacts"))

##output a header row
#foreach($field in $table.getFields()) $field #end

##output data
#foreach($row in $viewMethods.getTableDataRow($table))
  #foreach($field in $table.getFields()) $row.get($field), #end
#end

- Extensibility: error handling -

When the server encounters an error, it rolls back the requested action, skips any future actions and proceeds to return the requested template.

So errors can be handled seamlessly in a manner designed by the template developer, all that happens is that an object representing the error that occured (technically, a subclass of the Java Exception object) is made available to the template with the method calls$viewMethods.getWhetherExceptionOccured() and $viewMethods.getException(). When quickly prototyping applications, it's recommended that these are included in every template. In final applications, they may be used to graphically highlight input causing errors and display a message nearby for example.