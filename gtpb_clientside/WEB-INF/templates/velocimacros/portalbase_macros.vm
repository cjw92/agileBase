##
##  Copyright 2009 GT webMarque Ltd
## 
##  This file is part of GT portalBase.
##
##  GT portalBase is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##  GT portalBase is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with GT portalBase.  If not, see <http://www.gnu.org/licenses/>.
##
## define macros to reduce coding

  ## #fieldload:
  ##
  ##    $return - the variable to be set by the macro (will be a subclass of BaseField)
  ##    $table - the TableDefn object from which the $return BaseField should be obtained
  ##    $fieldname - the name of the field as displayed within pbAdmin (not internal name)
  ##
  #macro ( fieldload $return $table $fieldname)
    ## load a field object from its table object by name
    #set($return = $table.getFieldByName($fieldname))
  #end

  ## #reportfieldload:
  ##
  ##    $return - the variable to be set by the macro (will be a subclass of BaseField)
  ##    $report - the SimpleReportDefn object from which the $return BaseField should be obtained
  ##    $fieldname - the name of the field as displayed within pbAdmin (not internal name)
  ##
  #macro ( reportfieldload $return $report $fieldname)
    ## load a field object from its report object by name
    #set($return = $report.getReportFieldByName($fieldname).getBaseField())
  #end

  ## #fstringload:
  ##
  ##    $return - the variable to be set by the macro (will be a subclass of BaseValueInfo interface)
  ##              If the field's value is returned as null, the empty string is returned
  ##    $datasource - 
  ##    $field - the BaseField object from which the $return BaseValue should be obtained
  ##
  #macro( fstringload $return $datasource $field )
    ## reset a variable to empty string in case of null
    #set($return = "")
    #set($return = $datasource.get($field).toString())
  #end

  ## #fkeyload:
  ##
  ##    $return - the variable to be set by the macro (will be a string)
  ##              If the field's value is returned as null, the empty string is returned
  ##    $datasource - 
  ##    $field - the BaseField object from which the $return BaseValue should be obtained
  ##  
  #macro( fkeyload $return $datasource $field )
    #set($return = "")
    #set($return = $datasource.get($field).getKeyValue())
  #end
  
  ## #fdisplayload:
  ##
  ##    $return - the variable to be set by the macro (will be a string)
  ##              If the field's value is returned as null, the empty string is returned
  ##    $datasource - 
  ##    $field - the BaseField object from which the $return BaseValue should be obtained
  ##  
  #macro( fdisplayload $return $datasource $field )
    #set($return = "")
    #set($return = $datasource.get($field).getDisplayValue())
  #end
  
  ## #checkcriteria
  #macro ( checkcriteria $result $criteriaTable $criteriaName $idField $idValue )
    #set($checkCriteriaReport = $criteriaTable.getReportByName($criteriaName))
    #set($criteriaFilter = $viewTools.getNewFilterMap())
    #set($criteriaFilter = $criteriaFilter.put($idField, "$idValue"))
    #set($NO_ROW_LIMIT = -1)
    #set($checkCriteriaSet = [])
    #set($checkCriteriaSet = $viewMethods.getReportDataRows($checkCriteriaReport, $NO_ROW_LIMIT, $criteriaFilter, false))
    		#if($checkCriteriaSet.isEmpty())
    		  #set($result = false)		
    		#else
    		  #set($result = true)
    		#end
  #end
  
  ## #getcalculation
  #macro ( getcalculation $result $calculation_table_name $calculation_name $id_field_name $result_field_name $id_value )
    #set($calculation_table=$viewMethods.getTableByName($calculation_table_name))
    #set($calculationreport = $calculation_table.getReportByName($calculation_name))
    #fieldload($id_field $calculation_table $id_field_name)
    #set($calculationFilter = $viewTools.getNewFilterMap())
    #set($calculationFilter = $calculationFilter.put($id_field, "$id_value"))
    #set($NO_ROW_LIMIT = -1)
    #set($reportdata = $viewMethods.getReportDataRows($calculationreport, $NO_ROW_LIMIT, $calculationFilter))
    #if ( $reportdata.size() > 0)
      #set($calculationrow = $reportdata.get(0).getDataRowFields())	
      ## $getcalculationset is now a List<DataRow> object
      #reportfieldload($calculation_result_field $calculationreport $result_field_name)
      #fdisplayload ($result $calculationrow $calculation_result_field)
    #else
      #set($result = "")
    #end
  #end
